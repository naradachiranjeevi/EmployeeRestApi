package com.crud.service;

import java.util.List;
import java.util.NoSuchElementException;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.crud.entity.Product;
import com.crud.repository.ProductRepository;

@Service
public class ProductService {
	
	@Autowired
	private ProductRepository repository;
	
	
	//save
	public  Product saveProduct(Product product){
		return repository.save(product);
	   }
	
	//saveall
	public  List<Product> saveProducts(List<Product> products){
		return repository.saveAll(products);
	   }
	
	//getall
	public  List<Product> getProducts(){
		return repository.findAll();
	}
	
	//get
	public Product getProductById(int id) {
		return repository.findById(id).orElse(null);
	}
	
	//get name
	public Product getProductByName(String name) {
		return repository.findByName(name).orElse(null);
	}
	
	//delete
	public String deleteProduct(int id) {
		repository.deleteById(id);
		return "product removed !!"+id;
	}

	   //update
     public Product updateProduct(Product product){
		Product existingProduct=repository.findById(product.getId()).orElse(null);
		existingProduct.setName(product.getName());
		existingProduct.setQuantity(product.getQuantity());
		existingProduct.setPrice(product.getPrice());
		return repository.save(existingProduct);
	
		
		
	   } else {
           // Handle the case where the product with the given ID is not found
           Product product;
		throw new ProductNotFoundException();
       }
}

		
		
		
		
		
	
	   
//	public Product updateProduct(Product product) {
//	    // Check if the product exists in the repository
//	    Optional<Product> optionalExistingProduct = repository.findById(product.getId());
//	    
//	    if (optionalExistingProduct.isPresent()) {
//	        // If the product exists, update its attributes
//	        Product existingProduct = optionalExistingProduct.get();
//	        existingProduct.setName(product.getName());
//	        existingProduct.setQuantity(product.getQuantity());
//	        existingProduct.setPrice(product.getPrice());
//	        
//	        // Save the updated product and return it
//	        return repository.save(existingProduct);
//	    } else {
//	        // Handle the case where the product doesn't exist
//	        throw new NoSuchElementException("Product not found with ID: " + product.getId());
//	    }
//	}

	
	

	

	

